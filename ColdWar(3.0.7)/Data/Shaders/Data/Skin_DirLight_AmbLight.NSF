// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not 
// be copied or disclosed except in accordance with the terms of that 
// agreement.
//
//      Copyright (c) 1996-2006 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Chapel Hill, North Carolina 27517
// http://www.emergent.net

NSFShader Skin_DirLight_AmbLight
{
    "This shader skins a model using 26 bones per partition, applies a base "
    "map, and lights it with an ambient light and a directional light. "

    // The values for the lights.  
    Objects
    {
        Effect_GeneralLight   0   Light1
    }

    // Packing Definition
    PackingDef PosBlendWeightBlendIndicesNormUV0
    {
        PD_Stream   0
            PDP_Position        0   PDT_Float3
            PDP_BlendWeights    1   PDT_Float3
            PDP_BlendIndices    2   PDT_UByteColor
            PDP_Normal          3   PDT_Float3
            PDP_TexCoord0       4   PDT_Float2
    }
    
    // Implementation
    Implementation VS11
    {
        "This implementation is intended for hardware "
        "that supports Vertex Shader v1.1 and Pixel Shader v1.1."
        
        // Requirements for this implementation
        Requirements
        {
            Platform                = DX9|XENON
            VSVersion               = v1.1
            UserVersion             = v0.0
            PSVersion               = v1.1
            BonesPerPartition       = 26
            UsesNIRenderState       = true
        }
        
        // Packing Definition it uses
        PackingDef  PosBlendWeightBlendIndicesNormUV0

        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "Skin_DirLight_AmbLight.vsh"

            // Vertex Shader constant map. Mostly commented in the vsh file.
            // For double coverage, we'll state here that we could just use
            // ViewProjTranspose since the SkinWorld part is usually identity,
            // but if our assumption fails then at least positions will be 
            // correct on screen. Lighting will be off.
            VS_Constantmap
            {
                CM_Defined      SkinWorldViewProjTranspose  0   0
                CM_Defined      MaterialDiffuse             4   0
                CM_Constant     const_1_1_1_255             5   1   1.0,1.0,1.0,765.01
                CM_Object       Light1  WorldDirection      6
                CM_Object       Light1  Diffuse             7  
                CM_Defined      AmbientLight                8   0            
                CM_Defined      MaterialAmbient             9   0
                CM_Defined      MaterialSpecular            10  0 
                CM_Defined      MaterialEmissive            11  0
                CM_Defined      InvViewTranspose            12  0
                CM_Constant     Zoze                        16  1   0.0, 1.0, 0.0, 1.0
                CM_Defined      MaterialPower               17  0
                CM_Defined      BoneMatrix3                 18  0   26
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSS_Texture     = NTM_Base
                TSAMP_AddressU  = TADDR_Clamp
                TSAMP_AddressV  = TADDR_Clamp
                TSAMP_AddressW  = TADDR_Clamp
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_Linear
            }

            PSProgram   "Skin_DirLight_AmbLight.psh"
        }
    }
}

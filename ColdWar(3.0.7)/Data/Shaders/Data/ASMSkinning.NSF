// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not 
// be copied or disclosed except in accordance with the terms of that 
// agreement.
//
//      Copyright (c) 1996-2006 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Chapel Hill, North Carolina 27517
// http://www.emergent.net

// This version is for textured objects
NSFShader ASMSkinningLighting
{
    "This shader performs skinning in the vertex shader using 20 bones. "
    "It uses assembly shaders referenced by an NSF shader. "
    "It is not as optimized as ASMSkinningNoLighting, but it can calculate "
    "normals to perform lighting calculations. This shader applies a base map "
    "lit with a single light. "

    Objects
    {
        Effect_GeneralLight   0   Light1
    }

    // Packing Definition
    PackingDef PosBlendWeightBlendIndicesNormUV0
    {
        PD_Stream   0
            PDP_Position        0   PDT_Float3
            PDP_BlendWeights    1   PDT_Float3
            PDP_BlendIndices    2   PDT_UByteColor
            PDP_Normal          3   PDT_Float3
            PDP_TexCoord0       7   PDT_Float2
    }
    
    // Implementation
    Implementation VS11
    {
        "This implementation is intended for hardware "
        "that supports Vertex Shader v1.1"
        
        // Requirements for this implementation
        Requirements
        {
            Platform                = DX9
            VSVersion               = v1.1
            UserVersion             = v0.0
            PSVersion               = v0.0
            BonesPerPartition       = 20
            UsesNiRenderState       = true
        }
        
        // Packing Definition it uses
        PackingDef  PosBlendWeightBlendIndicesNormUV0

        // 'Global' render states
        RenderStates
        {
            Lighting            = false;
        }

        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "ASMSkinningLighting.vsh"

            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      ViewProjTranspose       0   0
                CM_Object       Light1  WorldDirection  4
                CM_Constant     const_1_0_1_255         5   1   1.0, 0.0, 1.0, 1020.01
                CM_Defined      SkinBoneMatrix4         10  0   20
            }

            // Texture stage 0
            Stage 0 Stage0
            {
                TSS_ColorOp     = TOP_Modulate
                TSS_ColorArg1   = TA_Texture
                TSS_ColorArg2   = TA_Diffuse
                TSS_AlphaOp     = TOP_Disable
                TSS_Texture     = NTM_Base
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }

    // Implementation
    Implementation VS11_PS11
    {
        "This implementation is intended for hardware that does not support "
        "a fixed-function pixel pipeline."
        
        // Requirements for this implementation
        Requirements
        {
            Platform                = XENON
            VSVersion               = v1.1
            UserVersion             = v0.0
            PSVersion               = v1.1
            BonesPerPartition       = 20
            UsesNiRenderState       = true
        }
        
        // Packing Definition it uses
        PackingDef  PosBlendWeightBlendIndicesNormUV0

        // 'Global' render states
        RenderStates
        {
            Lighting            = false;
        }

        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "ASMSkinningLighting.vsh"

            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      ViewProjTranspose       0   0
                CM_Object       Light1  WorldDirection  4
                CM_Constant     const_1_0_1_255         5   1   1.0, 0.0, 1.0, 1020.01
                CM_Defined      SkinBoneMatrix4         10  0   20
            }

            PSProgram
            {
                Platform = Xenon
                Program = "ASMSkinning.psh"
            }

            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSS_Texture     = NTM_Base
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }
}

NSFShader ASMSkinningNoLighting
{
    "This shader performs skinning in the vertex shader using 20 bones. "
    "It uses assembly shaders referenced by an NSF shader. "
    "It uses a more optimized method than ASMSkinningLighting by removing "
    "a CPU per-bone matrix multiplication, but it cannot perform any "
    "lighting calculations. This shader does apply a base map. "

    // Packing Definition
    PackingDef PosBlendWeightBlendIndicesNormUV0
    {
        PD_Stream   0
            PDP_Position        0   PDT_Float3
            PDP_BlendWeights    1   PDT_Float3
            PDP_BlendIndices    2   PDT_UByteColor
            PDP_Normal          3   PDT_Float3
            PDP_TexCoord0       7   PDT_Float2
    }
    
    // Implementation
    Implementation VS11
    {
        "This implementation is intended for hardware "
        "that supports Vertex Shader v1.1"
        
        // Requirements for this implementation
        Requirements
        {
            Platform                = DX9
            VSVersion               = v1.1
            UserVersion             = v0.0
            PSVersion               = v0.0
            BonesPerPartition       = 20
            UsesNiRenderState       = true
        }
        
        // Packing Definition it uses
        PackingDef  PosBlendWeightBlendIndicesNormUV0

        // 'Global' render states
        RenderStates
        {
            Lighting            = false;
        }

        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "ASMSkinningNoLighting.vsh"

            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      SkinWorldViewProjTranspose  0   0
                CM_Defined      MaterialDiffuse             4   0
                CM_Constant     const_1_0_1_255             5   1   1.0, 0.0, 1.0, 765.01
                CM_Defined      BoneMatrix3                 10  0   20
            }

            // Texture stage 0
            Stage 0 Stage0
            {
                TSS_ColorOp     = TOP_Modulate
                TSS_ColorArg1   = TA_Texture
                TSS_ColorArg2   = TA_Diffuse
                TSS_AlphaOp     = TOP_Disable
                TSS_Texture     = NTM_Base
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }

    // Implementation
    Implementation VS11_PS11
    {
        "This implementation is intended for hardware that does not support "
        "a fixed-function pixel pipeline."
        
        // Requirements for this implementation
        Requirements
        {
            Platform                = XENON
            VSVersion               = v1.1
            UserVersion             = v0.0
            PSVersion               = v1.1
            BonesPerPartition       = 20
            UsesNiRenderState       = true
        }
        
        // Packing Definition it uses
        PackingDef  PosBlendWeightBlendIndicesNormUV0

        // 'Global' render states
        RenderStates
        {
            Lighting            = false;
        }

        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "ASMSkinningNoLighting.vsh"

            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      SkinWorldViewProjTranspose  0   0
                CM_Defined      MaterialDiffuse             4   0
                CM_Constant     const_1_0_1_255             5   1   1.0, 0.0, 1.0, 765.01
                CM_Defined      BoneMatrix3                 10  0   20
            }

            PSProgram
            {
                Platform = Xenon
                Program = "ASMSkinning.psh"
            }

            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSS_Texture     = NTM_Base
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }
}

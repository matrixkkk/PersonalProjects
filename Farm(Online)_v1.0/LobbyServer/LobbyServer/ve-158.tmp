#include "stdafx.h"
#include "NetLobbyServer.h"


NetLobbyServer::NetLobbyServer()
{
	InitializeCriticalSection(&m_csListRooms);
	InitializeCriticalSection(&m_csListPlayersInLobby);
	InitializeCriticalSection(&m_csListPlayersInRoom);

	m_listRooms.clear();
	m_listPlayersInLobby.clear();
	m_listPlayersInRoom.clear();

	::ZeroMemory( &m_dbMysql, sizeof(m_dbMysql) );
}

NetLobbyServer::~NetLobbyServer()
{
	End();
}


// 서버 시작
BOOL NetLobbyServer::Begin()
{
	if( !InitSocket() )
	{
		MessageBox( NULL, L"NetLobbyServer::Begin() - InitSocket()", L"Failed", MB_OK );
		return FALSE;
	}

	if( !Bind() )
	{
		MessageBox( NULL, L"NetLobbyServer::Begin() - Bind()", L"Failed", MB_OK );
		return FALSE;
	}

	
	// MYSQL 초기화
	mysql_init(&m_dbMysql);
	
	// DB 접속
	if ( !mysql_real_connect(&m_dbMysql, MYSQL_HOST, MYSQL_USER, MYSQL_PWD, MYSQL_DB,3306, 0, 0 ) )
	{
		MessageBox( NULL, L"NetLobbyServer::Begin() - mysql_real_connect()", L"MySql DB Connect Failed", MB_OK );
		return FALSE;
	}

	//	데이타 베이스 고르기
  	if (mysql_select_db( &m_dbMysql, MYSQL_DB) < 0)
  	{
  		MessageBox( NULL, L"NetLobbyServer::Begin() - mysql_select_db()", L"MySql DB Connect Failed", MB_OK );
  		mysql_close( &m_dbMysql );
		return FALSE;
  	}

	
	if( CreateWorkerThread() )
		m_bRunWorkerThread = TRUE;

	
	return TRUE;
}


// 서버 종료
BOOL NetLobbyServer::End()
{

	DeleteCriticalSection(&m_csListRooms);
	DeleteCriticalSection(&m_csListPlayersInLobby);
	DeleteCriticalSection(&m_csListPlayersInRoom);

	if( !m_listRooms.empty() )
	{
	//	std::list< RoomInfo >::iterator iterRoom;
	//	for( iterRoom = m_listRooms.begin(); iterRoom != m_listRooms.end(); ++iterRoom )
	//		delete[] iterRoom->m_pJoiner;			

		m_listRooms.clear();
	}

	if( !m_listPlayersInLobby.empty() )
	{
		std::list< PlayerInfo* >::iterator iterPlayer;
		for( iterPlayer = m_listPlayersInLobby.begin(); iterPlayer != m_listPlayersInLobby.end(); ++iterPlayer )
			delete *iterPlayer;
//			delete iterPlayer->m_pSocketInfo;

		m_listPlayersInLobby.clear();
	}

	if( !m_listPlayersInRoom.empty() )
	{
		std::list< PlayerInfo* >::iterator iterPlayer;
		for( iterPlayer = m_listPlayersInRoom.begin(); iterPlayer != m_listPlayersInRoom.end(); ++iterPlayer )
			delete *iterPlayer;
			//delete iterPlayer->m_pSocketInfo;

		m_listPlayersInRoom.clear();
	}
	
	// db
	mysql_close( &m_dbMysql );

	m_bRunWorkerThread = FALSE;
	DestroyWorKerThread();
	
	if( !CloseSocket() )
		return FALSE;


	return TRUE;
}


//--------- Packet Analysis & Handling -----------

//	Recv 되어온 패킷을 분석 그에 맞게 처리하는 함수
void	NetLobbyServer::ProcessPacket( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{
	int type = 0;
	memcpy( &type, pBuf, sizeof( int ) );

	switch( type )
	{

	case CTOS_ROOM_LIST:
		// 방 리스트 정보 송신
		RoomList( pSocketInfo, pBuf, nLen );

		break;

	case CTOS_PLAYER_LIST:
		// 접속자 리스트 정보 송신
		PlayList( pSocketInfo, pBuf, nLen );

		break;

	case CTOS_LOGIN:
		Login( pSocketInfo, pBuf, nLen );
		break;

	case STOC_CREATE_ROOM:
		// 방 리스트 정보 송신

		break;

	case STOC_ENTER_ROOM:
		// 방 입장 허가
		JoinRoom( pSocketInfo, pBuf, nLen );

		break;

	case STOC_OUT_ROOM:
		// 방 나가기 허용

		break;

	case STOC_CHAT_IN_ROOM:
		// 방 채팅 메시지 송신

		break;

	case STOC_CHAR_IN_LOBBY:
		// 로비 채팅 메시지 송신

		break;

	case STOC_REMOVE_ROOM:
		// 로비 방 제거 송신

		break;

	case STOC_ADD_ROOM:
		// 로비 방 추가 송신
//		AddRoom( pBuf, nLen );

		break;

	case STOC_ADD_PLAYER:
		// 접속자 추가 송신
//		AddPlyaer( pBuf, nLen );


		break;

	case STOC_REMOVE_PLAYER:
		// 접속자 제거 송신

		break;


	}
}
	
//	접속한 소켓정보를 이용하여 자료구조에 할당
void	NetLobbyServer::ProcessConnect( SocketInfo *pSocketInfo )
{


}
	
//	접속 종료한 소켓정보를 자료구조로부터 제거
void	NetLobbyServer::ProcessDisConnect( SocketInfo *pSocketInfo )
{


}



//-------------------------------------------------------------------------
//
//								Recv Functions
//
//	Desc : Client로 부터 요청 메시지를 받아서 처리하는 함수 모음
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------------------
//
//	Function	: 클라이언트로부터 회원가입 메시지 수신 처리
//	Packet		: Size | type | ID | PW | GAME_ID
//	Size		: DWORD + BYTE + (char) * USER_ID_LEN(25) * 3  = 75BYTE
//-------------------------------------------------------------------------------------

void	NetLobbyServer::JoinMember( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{

	if( &m_dbMysql == NULL )
		return;

	char pTempBuf[ BUFSIZE ];	
	char szID[ USER_ID_LEN ];
	char szPW[ USER_ID_LEN ];
	char szGameID[ USER_ID_LEN ];
	char query[255];
	::ZeroMemory( query, sizeof(query) );
	::ZeroMemory( pTempBuf, BUFSIZE );

	MYSQL_RES   *sql_result = NULL;
	
	BYTE type;
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);

	::CopyMemory( szID		,	pBuf + dwSize								,	sizeof(char) * USER_ID_LEN );
	::CopyMemory( szPW		,	pBuf + dwSize + sizeof(char) * USER_ID_LEN	,	sizeof(char) * USER_ID_LEN );
	::CopyMemory( szGameID	,	pBuf + dwSize +	sizeof(char) * USER_ID_LEN*2,	sizeof(char) * USER_ID_LEN );

	//------- 먼저 DB에서 해당 ID화 GamedID 존재 유무 파악--------

	// 쿼리문 작성
	sprintf_s( query, "select * from %s where id = \"%s\" AND gameid = \"%s\"; ", MYSQL_DB, szID, szGameID);

	// 쿼리 적용
	if( 0 != mysql_query( &m_dbMysql, query ) )
	{
		MessageBox( NULL, L"NetLobbyServer::JoinMember - mysql_query() Failed", L"Faield", MB_OK );        
		return;		
	}

	// 결과를 얻는다.
	sql_result = mysql_store_result( &m_dbMysql );

	//	몇개의 투플인지 row값을 얻어오다.
	//  이미 존재하면해당 Client에게 Fail 메시지 전송
	if( mysql_num_rows( sql_result ) >= 1 )
	{
		type = NetLobbyServer::STOC_JOIN_MEMBERSHIP_FAIL;
		dwSize = sizeof(DWORD) + sizeof(BYTE);
		
		::CopyMemory( pTempBuf					,	&dwSize	,	sizeof(DWORD)	);
		::CopyMemory( pTempBuf + sizeof(DWORD)	,	&type	,	sizeof(BYTE)	);

		Send( &pSocketInfo->m_SockAddr, pTempBuf, (int)dwSize );

		return;
	}
		

	::ZeroMemory( query, sizeof(query) );
	sprintf_s(query, "insert into %s values "
                   "('%s', '%s', '%s')",
                   MYSQL_DB, szID, szPW, szGameID );

    if ( 0 != mysql_query( &m_dbMysql, query ) )
    {
		MessageBox( NULL, L"NetLobbyServer::JoinMember - mysql_query() Failed", L"Faield", MB_OK );        
        return;
	}

	type = NetLobbyServer::STOC_JOIN_MEMBERSHIP_OK;
	dwSize = sizeof(DWORD) + sizeof(BYTE);
		
	::CopyMemory( pTempBuf					,	&dwSize	,	sizeof(DWORD)	);
	::CopyMemory( pTempBuf + sizeof(DWORD)	,	&type	,	sizeof(BYTE)	);

	Send( &pSocketInfo->m_SockAddr, pTempBuf, (int)dwSize );

}


//-------------------------------------------------------------------------------------
//
//	Function	: 클라이언트로부터 접속 메시지 수신 처리
//	Packet		: Size | type | m_nPlayerNo | m_wstrID(Client ID) | 
//	Size		: DWORD + BYTE + BYTE  + (char) * USER_ID_LEN(25) = 50BYTE
//-------------------------------------------------------------------------------------

void	NetLobbyServer::Login( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{
	// 파일 또는 DB 에 있는 회원정보를 이용하여 존재 유무 확인

	
	// 회원이면 PlyaerList 추가
	/*
	SocketInfo *mySocketInfo =  new SocketInfo;
	::ZeroMemory( mySocketInfo, sizeof(mySocketInfo) );
	mySocketInfo->m_Sock	= pSocketInfo->m_Sock;
	mySocketInfo->m_SockAddr= pSocketInfo->m_SockAddr;

	//	ConnectPlayer.m_pSocketInfo = mySocketInfo;	
	*/
	
	// DB에 존재 유무 파악
	char pTempBuf[ BUFSIZE ];
	char szID[ USER_ID_LEN ];
	char szPW[ USER_ID_LEN ];
	char query[255];
	::ZeroMemory( pTempBuf, BUFSIZE );	
	::ZeroMemory( query, sizeof(query) );
	
	MYSQL_RES   *sql_result = NULL;
			
	BYTE type;
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);

	::CopyMemory( szID,	pBuf + dwSize								,	sizeof(char) * USER_ID_LEN );
	::CopyMemory( szPW,	pBuf + dwSize + sizeof(char) * USER_ID_LEN	,	sizeof(char) * USER_ID_LEN );

	// 쿼리문 작성
	sprintf_s( query, "select * from %s where id = \"%s\" AND pw = \"%s\"; ",MYSQL_DB, szID, szPW);

	// 쿼리 적용
	if( 0 != mysql_query( &m_dbMysql, query ) )
	{
		MessageBox( NULL, L"NetLobbyServer::Login - mysql_query() Failed", L"Faield", MB_OK );        
		return;		
	}

	// 결과를 얻는다.
	sql_result = mysql_store_result( &m_dbMysql );

	//	몇개의 투플인지 row값을 얻어오다.
	//  이미 존재하면해당 Client에게 Fail 메시지 전송
	if( mysql_num_rows( sql_result ) >= 1 )
	{

		PlayerInfo *pConnectPlayer	= new PlayerInfo;
		pConnectPlayer->m_Sock		= pSocketInfo->m_Sock;
		pConnectPlayer->m_SockAddr	= pSocketInfo->m_SockAddr;
		pConnectPlayer->m_nPlayerNo = 1;
		
		::CopyMemory( pConnectPlayer->m_wstrID, pBuf + sizeof(DWORD) + sizeof(BYTE), sizeof(wchar_t) * USER_ID_LEN );

		// 신규 접속자 m_nPlayerNo 고유 번호 셋팅
		EnterCriticalSection(&m_csListPlayersInLobby );

		std::list< PlayerInfo* >::iterator iterPlayer;
		for( iterPlayer = m_listPlayersInLobby.begin(); iterPlayer != m_listPlayersInLobby.end(); ++iterPlayer )
		{
			if( (*iterPlayer)->m_nPlayerNo != pConnectPlayer->m_nPlayerNo )
				break;
			else
				++pConnectPlayer->m_nPlayerNo;
		}
		
		::ZeroMemory( pTempBuf, BUFSIZE );
		type = NetLobbyServer::STOC_ADD_PLAYER;
		dwSize = sizeof(DWORD) + sizeof(BYTE) + sizeof(wchar_t) * USER_ID_LEN;

		::CopyMemory( pTempBuf,										&dwSize							,	sizeof(DWORD)					);
		::CopyMemory( pTempBuf + sizeof(DWORD),						&type							,	sizeof(BYTE)					);
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*1,	&pConnectPlayer->m_nPlayerNo	,	sizeof(BYTE)					);	
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*2,	pConnectPlayer->m_wstrID		,	sizeof(wchar_t) * USER_ID_LEN	);	
		
		
		// 신규 접속자에 대한 정보를 기존 Lobby에 있는 Client들에게 전송
		for( iterPlayer = m_listPlayersInLobby.begin(); iterPlayer != m_listPlayersInLobby.end(); ++iterPlayer )
		{
			Send( &(*iterPlayer)->m_SockAddr, pTempBuf, (int)dwSize );
		}
		
		// 신규 접속자를 자료구조에 추가
		m_listPlayersInLobby.push_back( pConnectPlayer );
		m_listPlayersInLobby.sort();

		LeaveCriticalSection(&m_csListPlayersInLobby );
		
		//-------------------------------------------------------------------------------------
		//
		//	Function	: 각각의 클라이언트에게 새로운 Client의 정보 전송 다했고 로그인이 승인 되었으면 고유번호를 보내준다.
		//	Packet		: Size | type | nPlayerNo(플레이어번호) 
		//	Size		: DWORD + BYTE + BYTE 1byte
		//-------------------------------------------------------------------------------------
		::ZeroMemory( pTempBuf, BUFSIZE );
		dwSize = sizeof(DWORD) + sizeof(BYTE)*2;
		type = NetLobbyServer::STOC_LOGIN_OK;

		::CopyMemory( pTempBuf									,	&dwSize						,	sizeof(DWORD)	);
		::CopyMemory( pTempBuf + sizeof(DWORD)					,	&type						,	sizeof(BYTE)	);
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)	,	&pConnectPlayer->m_nPlayerNo,	sizeof(BYTE)	);

		Send( &pConnectPlayer->m_SockAddr, pTempBuf, (int)dwSize );
		
		::SendMessage( m_hDlg, UM_UPDATEDATA, 0, 0 );		// 다이얼로그 정보 업데이트

	}

}



//-------------------------------------------------------------------------------------
//
//	Function	: 해당 클라이언트에게 로비서버 생성된 방 리스트 정보 송신
//	Packet		: Size | type | nRoomNo(방번호) | nRoomNo(방이름)	| (방인원) | (방상태)
//	Size		: DWORD + BYTE + (wchat_t) * ROOM_NAME_LEN(30) + BYTE + BYTE + BYTE = 63BYTE		512 / 63
//-------------------------------------------------------------------------------------
void	NetLobbyServer::RoomList( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{
	if( m_listRooms.empty() )
		return;

	BYTE type = NetLobbyServer::STOC_ADD_ROOMLIST;
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	DWORD dwRoomPacketSize = sizeof(BYTE) * 3 + sizeof(wchar_t) * ROOM_NAME_LEN;	//63Byte
	char pTempBuf[ BUFSIZE ];
	::ZeroMemory( pTempBuf, BUFSIZE );

	int cntRoom = 0;
	std::list< RoomInfo >::iterator iterRoom;

	::CopyMemory( pTempBuf + sizeof(DWORD), &type, sizeof(BYTE) );

	EnterCriticalSection(&m_csListRooms );
	
	for( iterRoom = m_listRooms.begin(); iterRoom != m_listRooms.end(); ++iterRoom )
	{
		if( cntRoom < static_cast< int >( (BUFSIZE - (sizeof(BYTE) + sizeof(DWORD))) / dwRoomPacketSize ) ) 
		{
			::CopyMemory( pTempBuf + dwSize					,	&iterRoom->m_nRoomNo	,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)	,	&iterRoom->m_nJoiners	,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)*2,	&iterRoom->m_bRoomState	,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)*3,	iterRoom->m_wstrRoomName,	sizeof(wchar_t) * ROOM_NAME_LEN );
		
			++cntRoom;
			dwSize += dwRoomPacketSize;
		}
		else
		{
			
			Send( &pSocketInfo->m_SockAddr, pTempBuf, dwSize );
			
			ZeroMemory( pTempBuf, BUFSIZE );
			dwSize = sizeof(DWORD) + sizeof(BYTE);

			::CopyMemory( pTempBuf + sizeof(DWORD)			,	&type					,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize					,	&iterRoom->m_nRoomNo	,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)	,	&iterRoom->m_nJoiners	,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)*2,	&iterRoom->m_bRoomState	,	sizeof(BYTE)					);
			::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)*3,	iterRoom->m_wstrRoomName,	sizeof(wchar_t) * ROOM_NAME_LEN );

			cntRoom = 1;			
		}
	}
	
	LeaveCriticalSection(&m_csListRooms );

	// 남은 Data 전송
	if( cntRoom >= 1  && dwSize > sizeof(DWORD) + sizeof(BYTE) )
	{
		Send( &pSocketInfo->m_SockAddr, pTempBuf, dwSize );
	}


	//-------------------------------------------------------------------------------------
	//
	//	Function	: 룸리스트 완료 Message 송신 Client는 이 정보를 받은후 내부 자료구조의 Data를 MFC 인터페이스에 출력 작업 수행
	//	Packet		: Size | type | 
	//	Size		: DWORD + BYTE 0byte
	//-------------------------------------------------------------------------------------

	ZeroMemory( pTempBuf, BUFSIZE );
	dwSize = sizeof(DWORD) + sizeof(BYTE);
	type = NetLobbyServer::STOC_ROOMLIST_SEND_OK;

	::CopyMemory( pTempBuf,					&dwSize	,	sizeof(DWORD)	);
	::CopyMemory( pTempBuf + sizeof(DWORD),	&type	,	sizeof(BYTE)	);

	Send( &pSocketInfo->m_SockAddr, pTempBuf, dwSize );
	
}

//-------------------------------------------------------------------------------------
//
//	Function	: 해당 클라이언트에게 로비서버 접속한 Client 리스트 정보 송신
//	Packet		: Size | type | m_wstrID(Client ID) | 
//	Size		: DWORD + BYTE + (wchat_t) * USER_ID_LEN(25) = 50BYTE		512 / 60
//-------------------------------------------------------------------------------------
void	NetLobbyServer::PlayList( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{

	if( m_listPlayersInLobby.empty() )
		return;

	BYTE type = NetLobbyServer::STOC_ADD_PlAYERLIST;
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	DWORD dwPlayerPacketSize =  sizeof(wchar_t) * ROOM_NAME_LEN;	//63Byte
	char pTempBuf[ BUFSIZE ];
	::ZeroMemory( pTempBuf, BUFSIZE );

	int cntPlayer = 0;
	std::list< PlayerInfo* >::iterator iterPlayer;

	::CopyMemory( pTempBuf + sizeof(DWORD), &type, sizeof(BYTE) );

	EnterCriticalSection(&m_csListPlayersInLobby );
	
	for( iterPlayer = m_listPlayersInLobby.begin(); iterPlayer != m_listPlayersInLobby.end(); ++iterPlayer )
	{
		if( cntPlayer < static_cast< int >( (BUFSIZE - (sizeof(BYTE) + sizeof(DWORD))) / dwPlayerPacketSize ) )
		{
			::CopyMemory( pTempBuf + dwSize, (*iterPlayer)->m_wstrID,	sizeof(wchar_t) * USER_ID_LEN );

			++cntPlayer;
			dwSize += dwPlayerPacketSize;
		}
		else
		{
			
			Send( &pSocketInfo->m_SockAddr, m_pBuf, dwSize );
			
			ZeroMemory( pTempBuf, BUFSIZE );
			dwSize = sizeof(DWORD) + sizeof(BYTE);

			::CopyMemory( pTempBuf + dwSize, (*iterPlayer)->m_wstrID,	sizeof(wchar_t) * USER_ID_LEN );			

			cntPlayer = 1;			
		}
	}
	
	LeaveCriticalSection(&m_csListPlayersInLobby );

	// 남은 Data 전송
	if( cntPlayer >= 1  && dwSize > sizeof(DWORD) + sizeof(BYTE) )
	{
		Send( &pSocketInfo->m_SockAddr, pTempBuf, dwSize );
	}

	//-------------------------------------------------------------------------------------
	//
	//	Function	: 플레이어 리스트 완료 Message 송신 Client는 이 정보를 받은후 내부 자료구조의 Data를 MFC 인터페이스에 출력 작업 수행
	//	Packet		: Size | type | 
	//	Size		: DWORD + BYTE 0byte
	//-------------------------------------------------------------------------------------

	// 전송 다했으면 전송완료 메세지 전송
	ZeroMemory( pTempBuf, BUFSIZE );
	dwSize = sizeof(DWORD) + sizeof(BYTE);
	type = NetLobbyServer::STOC_PLAYERLIST_SEND_OK;

	::CopyMemory( pTempBuf,					&dwSize	,	sizeof(DWORD)	);
	::CopyMemory( pTempBuf + sizeof(DWORD),	&type	,	sizeof(BYTE)	);

	Send( &pSocketInfo->m_SockAddr, pTempBuf, dwSize );
}

//-------------------------------------------------------------------------------------
//
//	Function	: 해당 클라이언트의 방 생성 요청을 수신하여 방 생성 처리-	
//	Packet		: Size | type | nPlayerNo(요청한 사용자 번호) | 방이름
//	Size		: DWORD + BYTE  + BYTE + wchar_t * ROOM_NAME_LEN(30) 61Byte
//-------------------------------------------------------------------------------------
void	NetLobbyServer::CreateRoom( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{
	BYTE type;
	char pTempBuf[BUFSIZE];
	::ZeroMemory( pTempBuf, BUFSIZE );
	DWORD dwSize;

	PlayerInfo	stTmpPlayer;
	RoomInfo	stTmpRoom;
	BYTE		nPlayerInRoomNo;		// 방에 접속한 고유번호
	BYTE		nPlayerInLobbyNo;		// 로비에 접속한 고유번호

	std::list< RoomInfo >::iterator iterRoom;
	std::list< PlayerInfo* >::iterator iterPlayerInLobby;
	std::list< PlayerInfo* >::iterator iterPlayerInRoom;

	::CopyMemory( &stTmpPlayer.m_nPlayerNo	, pBuf + sizeof(DWORD) + sizeof(BYTE)	, sizeof(BYTE) );	

	EnterCriticalSection( &m_csListRooms );
	EnterCriticalSection( &m_csListPlayersInRoom );
	EnterCriticalSection( &m_csListPlayersInLobby );

	// 요청한 Client가 로비에서 어떤 Client인지 찾는다.
	if( std::binary_search( m_listPlayersInLobby.begin(), m_listPlayersInLobby.end(), &stTmpPlayer ) )
	{
		iterPlayerInLobby = std::lower_bound( m_listPlayersInLobby.begin(), m_listPlayersInLobby.end(), &stTmpPlayer);	

		// 방안에 있는 유저의 번호 정보 설정
		nPlayerInRoomNo = 1;		
		for( iterPlayerInRoom = m_listPlayersInRoom.begin(); iterPlayerInRoom != m_listPlayersInRoom.end(); ++iterPlayerInRoom )
		{
			if( (*iterPlayerInLobby)->m_nPlayerNo != (*iterPlayerInRoom)->m_nPlayerNo )
				break;
			else
				++nPlayerInRoomNo;
		}

		(*iterPlayerInLobby)->m_nPlayerNo = nPlayerInRoomNo;
		// 방 접속자 리스트에 추가 & 정렬
		m_listPlayersInRoom.push_back( *iterPlayerInLobby );
		m_listPlayersInRoom.sort();

		// 로비 접속자 리스트에 추가 & 정렬
		m_listPlayersInLobby.erase( iterPlayerInLobby );

		// 방 고유 번호 부여
		stTmpRoom.m_nRoomNo = 1;
		for( iterRoom = m_listRooms.begin(); iterRoom != m_listRooms.end(); ++iterRoom )
		{
			if( stTmpRoom.m_nRoomNo != iterRoom->m_nRoomNo )
				break;
			else
				++stTmpRoom.m_nRoomNo;
		}

		::CopyMemory( stTmpRoom.m_wstrRoomName, pBuf + sizeof(DWORD) + sizeof(BYTE)*2	, sizeof(wchar_t) * ROOM_NAME_LEN );
		
		stTmpRoom.m_nJoiners			= 1;
		stTmpRoom.m_pJoiner[ 0 ]		= *iterPlayerInLobby;
		stTmpRoom.m_nJoinerState[ 0 ]	= STATE_CAPTAIN;
		stTmpRoom.m_bRoomState			= ROOM_STAND;
		stTmpRoom.m_nCaptain			= 0;

		m_listRooms.push_back( stTmpRoom );
		m_listRooms.sort();
	
		//-------------------------------------------------------------------------------------
		//
		//	Function	: 방 생성이 완료후 로비에 있는 각각의 Client에게 방 정보 Message 송신
		//	Packet		: Size | type | m_bRoomState(룸 상태) | m_nJoiners | m_wstrRoomName 
		//	Size		: DWORD + BYTE + BYTE + BYTE + wchar_t * ROOM_NAME_LEN(30) 62Byte
		//-------------------------------------------------------------------------------------

		::ZeroMemory( pTempBuf, BUFSIZE );
		type	= NetLobbyServer::STOC_ADD_ROOM;
		dwSize	= sizeof(DWORD) + sizeof(BYTE)*3 + sizeof(wchar_t)*ROOM_NAME_LEN;
		
		::CopyMemory( pTempBuf									, &dwSize					, sizeof(DWORD)						);
		::CopyMemory( pTempBuf + sizeof(DWORD)					, &type						, sizeof(BYTE)						);
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)	, &stTmpRoom.m_bRoomState	, sizeof(BYTE)						);
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*2	, &stTmpRoom.m_nJoiners		, sizeof(BYTE)						);
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*3	, &stTmpRoom.m_wstrRoomName	, sizeof(wchar_t) *  ROOM_NAME_LEN	);

		for( iterPlayerInLobby = m_listPlayersInLobby.begin(); iterPlayerInLobby != m_listPlayersInLobby.end(); ++iterPlayerInLobby )
			Send( &(*iterPlayerInLobby)->m_SockAddr, pTempBuf, (int)dwSize );


		//-------------------------------------------------------------------------------------
		//
		//	Function	: 방 생성이 완료후 해당 클라이언트에게 자신의 방에서의 상태와 방화면에 구성에 필요한 정보 송신
		//	Packet		: Size | type | nPayerNo(방접속 유저 리스트 고유번호) 
		//	Size		: DWORD + BYTE + BYTE 0Byte
		//-------------------------------------------------------------------------------------	

		::ZeroMemory( pTempBuf, BUFSIZE );
		type	= NetLobbyServer::STOC_ADD_ROOM;
		dwSize	= sizeof(DWORD) + sizeof(BYTE);
		
		::CopyMemory( pTempBuf									, &dwSize			, sizeof(DWORD)	);
		::CopyMemory( pTempBuf + sizeof(DWORD)					, &type				, sizeof(BYTE)	);
		::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)	, &nPlayerInRoomNo	, sizeof(BYTE)	);

		Send( &pSocketInfo->m_SockAddr, pTempBuf, (int)dwSize );

	}
	else
	{
		EnterCriticalSection( &m_csListRooms );
		EnterCriticalSection( &m_csListPlayersInRoom );
		EnterCriticalSection( &m_csListPlayersInLobby );
	}

	EnterCriticalSection( &m_csListRooms );
	EnterCriticalSection( &m_csListPlayersInRoom );
	EnterCriticalSection( &m_csListPlayersInLobby );

}

//-------------------------------------------------------------------------------------
//
//	Function	: 해당 클라이언트의 방 입장 요청을 수신하여 입장 처리
//	Packet		: Size | type | nPlayerNo(플레이어번호), nRoomNo(방번호) 
//	Size		: DWORD + BYTE + BYTE 1byte
//-------------------------------------------------------------------------------------

void	NetLobbyServer::JoinRoom( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{
	BYTE type;
	char pTempBuf[BUFSIZE];
	::ZeroMemory( pTempBuf, BUFSIZE );
	DWORD dwSize;

	PlayerInfo	stTmpPlayer;
	RoomInfo	stTmpRoom;
	BYTE		nPlayerInRoomNo;		// 방에 접속한 고유번호
	BYTE		nPlayerInLobbyNo;		// 로비에 접속한 고유번호
	std::list< RoomInfo >::iterator iterRoom;
	std::list< PlayerInfo* >::iterator iterPlayer;
	
	::CopyMemory( &stTmpRoom.m_nRoomNo		, pBuf + sizeof(DWORD)					, sizeof(BYTE) );	
	::CopyMemory( &stTmpPlayer.m_nPlayerNo	, pBuf + sizeof(DWORD) + sizeof(BYTE)	, sizeof(BYTE) );	

	EnterCriticalSection( &m_csListRooms );
	EnterCriticalSection( &m_csListPlayersInRoom );
	EnterCriticalSection( &m_csListPlayersInLobby );

	if( std::binary_search( m_listRooms.begin(), m_listRooms.end(), stTmpRoom ) )
	{
		iterRoom = std::lower_bound( m_listRooms.begin(), m_listRooms.end(), stTmpRoom );	

		switch( iterRoom->m_bRoomState )
		{
		case ROOM_STAND:
			//  대기 상태이므로 입장허용
			
			// 3. 해당 방에 들어가고, PlaerInRoom 리스트에 추가
			// 4. 해당 방에 있는 기존 유저들에게 새로운 유저 정보 송신
			// 5. 해당 방에 상태를 로비 유저들에게 전송
			// 1. 현재 로비에서 유저 목록에서 제거
			// 2. 이를 각 유저들에게 알린다.

			// 방안에 있는 유저의 번호 정보 설정
			nPlayerInRoomNo = 1;		
			for( iterPlayer = m_listPlayersInRoom.begin(); iterPlayer != m_listPlayersInRoom.end(); ++iterPlayer )
			{
				if( nPlayerInRoomNo != (*iterPlayer)->m_nPlayerNo )
					break;
				else
					++nPlayerInRoomNo;
			}
			
			// 로비에서 해당 유저의 번호를 찾아서 리스트에서 제거후 로비에 가각의 Client에게 지워진 Client 넘버 송신
			if( std::binary_search( m_listPlayersInLobby.begin(), m_listPlayersInLobby.end(),&stTmpPlayer ) )
			{
				iterPlayer = std::lower_bound( m_listPlayersInLobby.begin(), m_listPlayersInLobby.end(), &stTmpPlayer );	
				
				// 로비에서의 번호 저장
				nPlayerInLobbyNo = (*iterPlayer)->m_nPlayerNo;
				/*
				stTmpPlayer = *iterPlayer;
				stTmpPlayer.m_nPlayerNo = nPlayerInRoomNo;			//방에 있는 유저 번호
				stTmpPlayer.m_nRoomNo = stTmpRoom->m_nRoomNo;		//방 번호
				*/
				// 방 리스트에서의 번호로 교체
				(*iterPlayer)->m_nPlayerNo = nPlayerInRoomNo;

				// 방에 있는 유저 리스트에 추가
	//			m_listPlayersInRoom.push_back( stTmpPlayer );
				m_listPlayersInRoom.push_back( *iterPlayer );

				// 로비에 있는 유저 리스트에서 제거
				m_listPlayersInLobby.erase( iterPlayer );
				
				//-------------------------------------------------------------------------------------
				//
				//	Function	: 로비에 있는 유저 각각에게 방안으로 들어간 유저에 대해서 리스트에서  제거 메세지 송신
				//	Packet		: Size | type | nPlayerNo(플레이어번호) 
				//	Size		: DWORD + BYTE + BYTE 1byte
				//-------------------------------------------------------------------------------------
				::ZeroMemory( pTempBuf, BUFSIZE );
				dwSize = sizeof(DWORD) + sizeof(BYTE)*2;
				type = NetLobbyServer::STOC_REMOVE_PLAYER;
				
				::CopyMemory( pTempBuf									, &dwSize				, sizeof(DWORD) );
				::CopyMemory( pTempBuf + sizeof(DWORD)					, &type					, sizeof(BYTE)	);
				::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)	, &nPlayerInLobbyNo		, sizeof(BYTE)	);

				for( iterPlayer = m_listPlayersInLobby.begin(); iterPlayer != m_listPlayersInLobby.end(); ++iterPlayer )
				{
					Send( &(*iterPlayer)->m_SockAddr, pTempBuf, (int)dwSize );
				}

				//-------------------------------------------------------------------------------------
				//
				//	Function	: 방안에 있는 기존 멤버들에게 새로운 유저의 정보 송신
				//	Packet		: Size | type | nPlayerNo(플레이어번호) | newUserState(플레이어 상태), m_wstrID(ID) 
				//	Size		: DWORD + BYTE + BYTE + wchar_t * USER_ID_LEN  51byte
				//-------------------------------------------------------------------------------------

				::ZeroMemory( pTempBuf, BUFSIZE );
				dwSize = sizeof(DWORD) + sizeof(BYTE) + sizeof(wchar_t) * USER_ID_LEN;
				type = NetLobbyServer::STOC_JOINROOM_PLAYERINFO;
				UserInRoomState newUserState= STATE_DEFAULT;

				::CopyMemory( pTempBuf									, &dwSize					, sizeof(DWORD)					);
				::CopyMemory( pTempBuf + sizeof(DWORD)					, &type						, sizeof(BYTE)					);
				::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)	, &stTmpPlayer.m_nPlayerNo	, sizeof(BYTE)					);
				::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*2	, &newUserState				, sizeof(BYTE)					);
				::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*3	, stTmpPlayer.m_wstrID		, sizeof(wchar_t) * USER_ID_LEN	);

				for( int iPlayer = 0; iPlayer < iterRoom->m_nJoiners; iPlayer++ )
				{
					Send( &iterRoom->m_pJoiner[ iPlayer ]->m_SockAddr, pTempBuf, (int)dwSize );
				}

				//-------------------------------------------------------------------------------------
				//
				//	Function	: 방안에 들어온 신규 유저에게 기존 유저들에 대한 정보 전송
				//	Packet		: Size | type | m_nJoiners | nState(유저 상태) | m_wstrID(ID)
				//	Size		: DWORD + BYTE + BYTE + wchar_t * USER_ID_LEN  52byte
				//-------------------------------------------------------------------------------------
				::ZeroMemory( pTempBuf, BUFSIZE );
				DWORD dwPacketPalyerSize = sizeof(BYTE) + sizeof(wchar_t)*USER_ID_LEN;
				dwSize = sizeof(DWORD) + sizeof(BYTE)*2;
				type = NetLobbyServer::STOC_JOINROOM_PLAYERINFO;
				
//				::CopyMemory( pTempBuf + sizeof(DWORD)					, &type					, sizeof(BYTE)	);
				::CopyMemory( pTempBuf + sizeof(DWORD)					, &type					, sizeof(BYTE)	);
				::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)	, &iterRoom->m_nJoiners	, sizeof(BYTE) );

				for( int iPlayer = 0; iPlayer < iterRoom->m_nJoiners; iPlayer++ )
				{				
					::CopyMemory( pTempBuf + dwSize					, &iterRoom->m_nJoinerState[ iPlayer ]	, sizeof(BYTE)					);
					::CopyMemory( pTempBuf + dwSize + sizeof(BYTE)	, iterRoom->m_wstrRoomName				, sizeof(wchar_t) * USER_ID_LEN	);
					dwSize += dwPacketPalyerSize;
				}
				dwSize -= dwPacketPalyerSize;

				Send( &pSocketInfo->m_SockAddr, pTempBuf, (int)dwSize );

			}

			break;

		case ROOM_FOOL:
			//-------------------------------------------------------------------------------------
			//
			//	Function	: 정원(6명)이 다 찬 상태
			//	Packet		: Size | type 
			//	Size		: DWORD + BYTE 
			//-------------------------------------------------------------------------------------
			dwSize = sizeof(DWORD) + sizeof(BYTE);
			type = NetLobbyServer::STOC_NOT_ENTER_FOOL;
			::CopyMemory( pTempBuf,					&dwSize	, sizeof(DWORD)	);
			::CopyMemory( pTempBuf + sizeof(DWORD), &type	, sizeof(BYTE)	);

			Send( &pSocketInfo->m_SockAddr, pTempBuf, (int)dwSize );

			break;

		case ROOM_RUNNING_GAME:
			//-------------------------------------------------------------------------------------
			//
			//	Function	: 게임 시작 상태
			//	Packet		: Size | type 
			//	Size		: DWORD + BYTE 
			//-------------------------------------------------------------------------------------
			dwSize = sizeof(DWORD) + sizeof(BYTE);
			type = NetLobbyServer::STOC_NOT_ENTER_GAMMING;
			::CopyMemory( pTempBuf,					&dwSize	, sizeof(DWORD)	);
			::CopyMemory( pTempBuf + sizeof(DWORD), &type	, sizeof(BYTE)	);

			Send( &pSocketInfo->m_SockAddr, pTempBuf, (int)dwSize );

			break;

		}

		LeaveCriticalSection( &m_csListPlayersInLobby );
		LeaveCriticalSection( &m_csListPlayersInRoom );
		LeaveCriticalSection( &m_csListRooms );
	}

	LeaveCriticalSection( &m_csListPlayersInLobby );
	LeaveCriticalSection( &m_csListPlayersInRoom );
	LeaveCriticalSection( &m_csListRooms );
	
}

//		해당 클라이언트 방 나가기 요청을 수신하여 방 나가기 처리
void	NetLobbyServer::OutRoom	( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{
	

}

//		해당 클라이언트 chat 정보를 Lobby에 있는 각각의 클라이언트들에게 전송
void	NetLobbyServer::ChatInLobby( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{

}

//		해당 클라이언트의 chat 정보를 현재 클라이언트의 방안에 접속한 각각의 클라이언트들에게 전송
void	NetLobbyServer::ChatInRoom( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{

}

//		동물농장 Game Process를 생성하여 각각의 클라이언트 정보를 해당 클라이언트(방장)에게 전송
void	NetLobbyServer::GameStart( SocketInfo *pSocketInfo, const char* pBuf, int nLen )
{

}
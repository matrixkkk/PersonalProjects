#include "stdafx.h"
#include "NetLobbyClient.h"


//------------ 초기화 ------------
NetLobbyClient::NetLobbyClient()
//-------------------------------- 
{
	m_PlayerNo = -1;

	InitializeCriticalSection(&m_csListRooms);
	InitializeCriticalSection(&m_csListPlayers);

	m_listRooms.clear();
	m_listPlayers.clear();
}

//------------ Release ------------
NetLobbyClient::~NetLobbyClient()
//---------------------------------
{
	DeleteCriticalSection(&m_csListRooms);
	DeleteCriticalSection(&m_csListPlayers);

	if( !m_listRooms.empty() )
	{
		m_listRooms.clear();
	}

	if( !m_listPlayers.empty() )
	{
		m_listPlayers.clear();
	}

}


//--------- Packet Analysis & Handling -----------

//	Recv 되어온 패킷을 분석 그에 맞게 처리하는 함수
void	NetLobbyClient::ProcessPacket( SocketInfo *pSocketInfo, char* pBuf, int nLen )
{
	int type = 0;
	::CopyMemory( &type, pBuf, sizeof( int ) );

	switch( type )
	{

	case STOC_ADD_ROOMLIST:
		// 방 리스트 정보 송신
		if( AddRoomList( pBuf, nLen ) )
		{

		}

		break;

	case STOC_ADD_PlAYERLIST:
		// 접속자 리스트 정보 송신
		AddPlayer( pBuf, nLen );

		break;
	case STOC_LOGIN_OK:
		// 서버 접속 허용
		if( DisplayLobby() )
		{
			RequestRoomList();
		}

		break;
	
	case STOC_ROOMLIST_SEND_OK:
		//	룸 리스트 정보 Recv 완료후 view 방 list 갱신

		
		//	유저 리스트 정보도 송신 요청
		if( RequestPlayerList() )
		{

		}


		break;

	case STOC_PLAYERLIST_SEND_OK:
		// 접속한 유저 리스트 정보 Recv 완료후 view에 유저 리스트 갱신


	case STOC_CREATE_ROOM:
		// 방 리스트 정보 송신

		break;

	case STOC_ENTER_ROOM:
		// 방 입장 허가

		break;

	case STOC_OUT_ROOM:
		// 방 나가기 허용

		break;

	case STOC_CHAT_IN_ROOM:
		// 방 채팅 메시지 송신

		break;

	case STOC_CHAR_IN_LOBBY:
		// 로비 채팅 메시지 송신

		break;

	case STOC_ADD_ROOM:
		// 로비 방 추가 송신
		AddRoom( pBuf, nLen );

		break;

	case STOC_ADD_PLAYER:
		// 접속자 추가 송신
		AddPlayer( pBuf, nLen );


		break;

	case STOC_REMOVE_ROOM:
		// 방 1개 제거 송신
		if( DeleteRoom( pBuf, nLen ) )
		{

		}

		break;

	case STOC_REMOVE_PLAYER:
		// 접속자 1명 제거 송신		
		if( DeletePlayer( pBuf, nLen ) )
		{

		}

		break;
	}
}
	
//	접속한 소켓정보를 이용하여 자료구조에 할당
void	NetLobbyClient::ProcessConnect( SocketInfo *pSocketInfo )
{


}
	
//	접속 종료한 소켓정보를 자료구조로부터 제거
void	NetLobbyClient::ProcessDisConnect( SocketInfo *pSocketInfo )
{


}

//	접속한 소켓정보를 이용하여 자료구조에 할당
BOOL	NetLobbyClient::Begin()
{
	if( !InitSocket() )
	{
		MessageBox( NULL, L"NetLobbyServer::Begin() - InitSocket()", L"Failed", MB_OK );
		return FALSE;
	}

	if( CreateWorkerThread() )
		m_bRunWorkerThread = TRUE;

	return TRUE;
}
	
//	접속 종료한 소켓정보를 자료구조로부터 제거
BOOL	NetLobbyClient::End()
{

	DeleteCriticalSection(&m_csListRooms);
	DeleteCriticalSection(&m_csListPlayers);

	if( !m_listRooms.empty() )
	{
		m_listRooms.clear();
	}

	if( !m_listPlayers.empty() )
	{	
		m_listPlayers.clear();
	}
	
	m_bRunWorkerThread = FALSE;
	DestroyWorKerThread();
	
	if( !CloseSocket() )
		return FALSE;

	return TRUE;

}




//-------------------------------------------------------------------------
//
//								Request Functions
//
//	Desc : Client가 Server 에게 요청 메시지 전송하는 함수 모음
//-------------------------------------------------------------------------

//		로비서버 회원가입 요청
BOOL	NetLobbyClient::RequestJoinMemeber( CString &ID, CString &PW, CString &GameID )
{
	char	pTempBuf[ BUFSIZE ];
	char szID[ USER_ID_LEN ];
	char szPW[ USER_ID_LEN ];
	char szGameID[ USER_ID_LEN ];
	::ZeroMemory( pTempBuf, BUFSIZE );

	BYTE	type	= NetLobbyClient::CTOS_JOIN_MEMBERSHIP;
	DWORD	dwSize	= sizeof(BYTE) + sizeof(wchar_t) * USER_ID_LEN * 2;
	 
	WideCharToMultiByte( CP_ACP, 0, ID.GetBuffer()		, -1, szID		, sizeof(szID)		, NULL, NULL ); 
	WideCharToMultiByte( CP_ACP, 0, PW.GetBuffer()		, -1, szPW		, sizeof(szPW)		, NULL, NULL ); 
	WideCharToMultiByte( CP_ACP, 0, GameID.GetBuffer()	, -1, szGameID	, sizeof(szGameID)	, NULL, NULL ); 

	//--------------------------------------------------------------------------------------------------------------------
	::CopyMemory( pTempBuf,													&type		,	sizeof(int)					);
	::CopyMemory( pTempBuf + sizeof(int),									&szID		,	sizeof(char) * USER_ID_LEN	);
	::CopyMemory( pTempBuf + sizeof(int) + sizeof(char) * USER_ID_LEN,		&szPW		,	sizeof(char) * USER_ID_LEN	);
	::CopyMemory( pTempBuf + sizeof(int) + sizeof(char) * USER_ID_LEN*2,	&szGameID	,	sizeof(char) * USER_ID_LEN	);

/*
	char *szIP = (LPSTR)(LPCSTR)IP.GetBuffer();
	m_SockAddr.sin_family		= AF_INET;
	m_SockAddr.sin_port			= htons(9000);
	m_SockAddr.sin_addr.s_addr	= inet_addr( szIP );
*/
	Send( pTempBuf, dwSize );

	return TRUE;
}

BOOL	NetLobbyClient::RequestLogin( CString &IP, CString &ID, CString &PW )
{	
	char pTempBuf[ BUFSIZE ];
	char szID[ USER_ID_LEN ];
	char szPW[ USER_ID_LEN ];
	::ZeroMemory( pTempBuf, BUFSIZE );	

	BYTE	type	= NetLobbyClient::CTOS_LOGIN;
	DWORD	dwSize	= sizeof(BYTE) + sizeof(wchar_t) * USER_ID_LEN * 2;

	WideCharToMultiByte(CP_ACP, 0, ID.GetBuffer(), -1, szID, sizeof(szID), NULL, NULL); 
	WideCharToMultiByte(CP_ACP, 0, PW.GetBuffer(), -1, szPW, sizeof(szPW), NULL, NULL); 	

	//------------------------------------------------------------------------------------------
	::CopyMemory( pTempBuf,													&type	,	sizeof(int)					);
	::CopyMemory( pTempBuf + sizeof(int),									&szID	,	sizeof(char) * USER_ID_LEN	);
	::CopyMemory( pTempBuf + sizeof(int) + sizeof(char) * USER_ID_LEN,		&szPW	,	sizeof(char) * USER_ID_LEN	);

/*
	char *szIP = (LPSTR)(LPCSTR)IP.GetBuffer();
	m_SockAddr.sin_family		= AF_INET;
	m_SockAddr.sin_port			= htons(9000);
	m_SockAddr.sin_addr.s_addr	= inet_addr( szIP );
*/
	Send( pTempBuf, dwSize );

	return TRUE;
}

//		로비서버의 개설된 방 리스트 요청
BOOL	NetLobbyClient::RequestRoomList()
{

	char pTempBuf[BUFSIZE];
	::ZeroMemory( pTempBuf, BUFSIZE );

	BYTE	type	= NetLobbyClient::CTOS_ROOM_LIST;
	//DWORD	dwSize	= sizeof(DWORD) + sizeof(BYTE);
	DWORD	dwSize	= sizeof(BYTE);

	::CopyMemory( pTempBuf,	 &type,	sizeof(BYTE) );

	Send( pTempBuf, dwSize );

	return TRUE;
}

//		로비서버의 접속한 클라이언트 리스트 요청
BOOL	NetLobbyClient::RequestPlayerList()
{
	char pTempBuf[BUFSIZE];
	::ZeroMemory( pTempBuf, BUFSIZE );

	BYTE	type	= NetLobbyClient::STOC_ADD_PlAYERLIST;
	DWORD	dwSize	= sizeof(BYTE);

	::CopyMemory( pTempBuf,	 &type,	sizeof(BYTE) );

	Send( pTempBuf, dwSize );

	return TRUE;
}

//-------------------------------------------------------------------------------------
//
//	Function	: 선택한 방 번호를 이용하여 방 입장 요청
//	Packet		: Size | type | nPlayerNo(유저번호) | nRoomNo(방번호) 
//	Size		: DWORD + BYTE + BYTE 1byte
//-------------------------------------------------------------------------------------
BOOL	NetLobbyClient::RequestJoinRoom( BYTE nRoomNo )
{
	char pTempBuf[BUFSIZE];
	::ZeroMemory( pTempBuf, BUFSIZE );

	BYTE	type	= NetLobbyClient::STOC_ENTER_ROOM;
	DWORD	dwSize	= sizeof(DWORD) + sizeof(BYTE) * 3;

	::CopyMemory( pTempBuf,									&dwSize		,	sizeof(DWORD) );
	::CopyMemory( pTempBuf + sizeof(DWORD),					&type		,	sizeof(BYTE) );
	::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE),	&m_PlayerNo	,	sizeof(BYTE) );
	::CopyMemory( pTempBuf + sizeof(DWORD) + sizeof(BYTE)*2,&nRoomNo	,	sizeof(BYTE) );

	Send( pTempBuf, dwSize );

	return TRUE;
}


//		방 만들기 요청
BOOL	NetLobbyClient::RequestCreateRoom()
{
	char pTempBuf[BUFSIZE];
	::ZeroMemory( pTempBuf, BUFSIZE );


	BYTE	type	= NetLobbyClient::STOC_CREATE_ROOM;
	DWORD	dwSize	= sizeof(BYTE);

	::CopyMemory( pTempBuf,					&type,		sizeof(BYTE) );

	Send( pTempBuf, dwSize );

	return TRUE;
	

}

//		로비에서 Chat Message 송신
BOOL	NetLobbyClient::RequestChatInLobby()
{

	return TRUE;
}

//		방안에서 Chat Message 송신
BOOL	NetLobbyClient::RequestChatInRoom()
{

	return TRUE;
}

//		방안에서 나가기 요청
BOOL	NetLobbyClient::RequestOutRoom()
{

	return TRUE;
}


//-------------------------------------------------------------------------
//
//							Recv Functions
//
//	Desc : Server로 부터 메시지 수신하여 처리하는 함수 모음
//-------------------------------------------------------------------------



BOOL NetLobbyClient::DisplayLobby()
{
	return TRUE;
}

//-------------------------------------------------------------------------------------
//
//	Function	: 해당 클라이언트에게 로비서버 생성된 방 리스트 정보 송신
//	Packet		: Size | type | nRoomNo(방번호) | nRoomNo(방이름)	| (방인원) | (방상태)
//	Size		: DWORD + BYTE + (wchat_t) * ROOM_NAME_LEN(30) + BYTE + BYTE + BYTE = 63BYTE		512 / 63
//-------------------------------------------------------------------------------------
BOOL	NetLobbyClient::AddRoomList	( char *pBuf, int nLen )
{

	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	DWORD dwPacketRoomSize = sizeof(BYTE)*4 + sizeof(wchar_t) * ROOM_NAME_LEN;

	RoomInfo stRoom;	

	EnterCriticalSection( &m_csListRooms );

	while( (int)dwSize < nLen  )
	{
		ZeroMemory( &stRoom, sizeof(RoomInfo) );

		::CopyMemory( &stRoom.m_nRoomNo		,   pBuf + dwSize													,	sizeof(BYTE)					);		
		::CopyMemory( stRoom.m_wstrRoomName	,	pBuf + dwSize + sizeof(BYTE)									,	sizeof(wchar_t)*ROOM_NAME_LEN	);
		::CopyMemory( &stRoom.m_nJoiners	,   pBuf + dwSize + sizeof(BYTE)*1 + sizeof(wchar_t)*ROOM_NAME_LEN	,	sizeof(BYTE)					);
		::CopyMemory( &stRoom.m_bRoomState	,	pBuf + dwSize + sizeof(BYTE)*2 + sizeof(wchar_t)*ROOM_NAME_LEN	,	sizeof(BYTE)					);
		
		dwSize += dwPacketRoomSize;				

		m_listRooms.push_back( stRoom );		
	}

	m_listRooms.sort();

	LeaveCriticalSection( &m_csListRooms );

	return TRUE;

}

//-------------------------------------------------------------------------------------
//
//	Function	: 해당 클라이언트에게 로비서버 접속한 Client 리스트 정보 송신
//	Packet		: Size | type | m_nPlayerNo | m_wstrID(Client ID) | 
//	Size		: DWORD + BYTE + BYTE + (wchat_t) * USER_ID_LEN(25) = 52BYTE		512 / 52
//-------------------------------------------------------------------------------------
BOOL	NetLobbyClient::AddPlyaerList( char *pBuf, int nLen )
{

	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	DWORD dwPacketPlayerize =  sizeof(BYTE) + sizeof(wchar_t) * USER_ID_LEN;

	PlayerInfo stPlayer;	

	EnterCriticalSection( &m_csListPlayers );

	while( (int)dwSize < nLen  )
	{
		ZeroMemory( &stPlayer, sizeof(stPlayer) );

		::CopyMemory( &stPlayer.m_nPlayerNo	, pBuf + dwSize					, sizeof(BYTE)					);				
		::CopyMemory( stPlayer.m_wstrID		, pBuf + dwSize + sizeof(BYTE)	, sizeof(wchar_t) * USER_ID_LEN	);				
		
		dwSize += dwPacketPlayerize;				

		m_listPlayers.push_back( stPlayer );		
	}

	m_listPlayers.sort();

	LeaveCriticalSection( &m_csListPlayers );

	return TRUE;
}


//-------------------------------------------------------------------------------------
//
//	Function	: 로비서버에서 생성된 방 정보 1개 수신 처리
//	Packet		: Size | type | nRoomNo(방번호) | nRoomNo(방이름)	| (방인원) | (방상태)
//	Size		: DWORD + BYTE + (wchat_t) * ROOM_NAME_LEN(30) + BYTE + BYTE + BYTE = 68BYTE		
//-------------------------------------------------------------------------------------

BOOL	NetLobbyClient::AddRoom( char *pBuf, int nLen )
{
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	
	RoomInfo stRoom;	
	::ZeroMemory( &stRoom, sizeof(RoomInfo) );

	::CopyMemory( &stRoom.m_nRoomNo		,   pBuf + dwSize													,	sizeof(BYTE)					);		
	::CopyMemory( stRoom.m_wstrRoomName	,	pBuf + dwSize + sizeof(BYTE)									,	sizeof(wchar_t)*ROOM_NAME_LEN	);
	::CopyMemory( &stRoom.m_nJoiners	,   pBuf + dwSize + sizeof(BYTE)*1 + sizeof(wchar_t)*ROOM_NAME_LEN	,	sizeof(BYTE)					);
	::CopyMemory( &stRoom.m_bRoomState	,	pBuf + dwSize + sizeof(BYTE)*2 + sizeof(wchar_t)*ROOM_NAME_LEN	,	sizeof(BYTE)					);

	EnterCriticalSection( &m_csListRooms );

	m_listRooms.push_back( stRoom );
	m_listRooms.sort();

	LeaveCriticalSection( &m_csListRooms );

	//방 리스트 뷰 갱신 필요!!

	return TRUE;
}

//-------------------------------------------------------------------------------------
//
//	Function	: 로비서버 접속한 Client 1명 정보 송신
//	Packet		: Size | type | m_nPlayerNo | m_wstrID(Client ID) | 
//	Size		: DWORD + BYTE + BYTE + (wchat_t) * USER_ID_LEN(25) = 52BYTE		512 / 52
//-------------------------------------------------------------------------------------
BOOL	NetLobbyClient::AddPlayer	( char *pBuf, int nLen )
{
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);

	PlayerInfo stPlayer;
	::ZeroMemory( &stPlayer, sizeof(PlayerInfo) );

	::CopyMemory( &stPlayer.m_nPlayerNo	, pBuf + dwSize					, sizeof(BYTE)					);				
	::CopyMemory( stPlayer.m_wstrID		, pBuf + dwSize + sizeof(BYTE)	, sizeof(wchar_t) * USER_ID_LEN	);	

	EnterCriticalSection( &m_csListPlayers );

	m_listPlayers.push_back( stPlayer );		
	m_listPlayers.sort();

	LeaveCriticalSection( &m_csListPlayers );
	
	//방 리스트 뷰 갱신 필요!!

	return TRUE;	
}

//		방 1개 리스트에서 제거
BOOL	NetLobbyClient::DeleteRoom( char *pBuf, int nLen )
{
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	
	RoomInfo stRoom;	
	::ZeroMemory( &stRoom, sizeof(RoomInfo) );
	std::list< RoomInfo >::iterator iterRoom;

	::CopyMemory( &stRoom.m_nRoomNo		,   pBuf + dwSize,	sizeof(BYTE) );

	EnterCriticalSection( &m_csListRooms );

	if( std::binary_search( m_listRooms.begin(), m_listRooms.end(), stRoom ) )
	{
		iterRoom = std::lower_bound( m_listRooms.begin(), m_listRooms.end(), stRoom );
		m_listRooms.erase( iterRoom );
	}	

	LeaveCriticalSection( &m_csListRooms );

	//방 리스트 뷰 갱신 필요!!

	return TRUE;
}

//-------------------------------------------------------------------------------------
//
//	Function	: 로비서버 접속 종료한 Client 1명 정보 송신하여 리스트에서 제거
//	Packet		: Size | type | m_nPlayerNo 
//	Size		: DWORD + BYTE + BYTE =  1byte
//-------------------------------------------------------------------------------------
BOOL	NetLobbyClient::DeletePlayer( char *pBuf, int nLen )
{
	DWORD dwSize = sizeof(DWORD) + sizeof(BYTE);
	
	PlayerInfo stPlayer;	
	::ZeroMemory( &stPlayer, sizeof(stPlayer) );
	std::list< PlayerInfo >::iterator iterPlayer;

	::CopyMemory( &stPlayer.m_nPlayerNo,   pBuf + dwSize,	sizeof(BYTE) );

	EnterCriticalSection( &m_csListPlayers );

	if( std::binary_search( m_listPlayers.begin(), m_listPlayers.end(), stPlayer ) )
	{
		iterPlayer = std::lower_bound( m_listPlayers.begin(), m_listPlayers.end(), stPlayer );
		m_listPlayers.erase( iterPlayer );
	}	

	LeaveCriticalSection( &m_csListPlayers );

	// 유저 리스트 갱신 필요
	
	return TRUE;

}

//		회원 가입 실패
BOOL	NetLobbyClient::JoinMemberShipFail( char *pBuf, int nLen )
{
	MessageBox( NULL, L"이미 존재하는 아이디 입니다. 다시 입력해주세요", L"Failed", MB_OK );

	return TRUE;
}

//		회원 가입 성공
BOOL	NetLobbyClient::JoinMemberShipOK( char *pBuf, int nLen )
{
	MessageBox( NULL, L"축하합니다. 가입 완료되었습니다.", L"성공 '_'v", MB_OK );

	return TRUE;
}

//		방 접속
BOOL	NetLobbyClient::JoinRoom( char *pBuf, int nLen )
{

	return TRUE;
}

//		방 나가기
BOOL	NetLobbyClient::OutRoom	( char *pBuf, int nLen )
{
	return TRUE;
}

//		로비 채팅 메시지 추가
BOOL	NetLobbyClient::AddChatMessageAtLobby( char *pBuf, int nLen )
{
	return TRUE;
}

//		방 채팅 메시지 추가
BOOL	NetLobbyClient::AddChatMessageAtRoom( char *pBuf, int nLen )
{
	return TRUE;
}